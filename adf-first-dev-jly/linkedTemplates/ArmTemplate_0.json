{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-first-dev-jly"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"ls_AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_AzureBlobStorage1'"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.stackexchange.com/2.3/"
		},
		"ls_AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://key-vault-tstgrp.vault.azure.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_parameter_tag": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@concat('questions?order=desc&sort=activity&tagged=', dataset().ds_parameter_tag,'&site=stackoverflow')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sql_schema": {
						"type": "string"
					},
					"sql_table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().sql_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().sql_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Json1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_parameter_folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().ds_parameter_folder",
							"type": "Expression"
						},
						"container": "landing"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Parquet_bronze')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_output_parameter_folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().ds_output_parameter_folder",
							"type": "Expression"
						},
						"container": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "YEAR",
						"type": "UTF8"
					},
					{
						"name": "MONTH",
						"type": "UTF8"
					},
					{
						"name": "SUPPLIER",
						"type": "UTF8"
					},
					{
						"name": "ITEM CODE",
						"type": "UTF8"
					},
					{
						"name": "ITEM DESCRIPTION",
						"type": "UTF8"
					},
					{
						"name": "ITEM TYPE",
						"type": "UTF8"
					},
					{
						"name": "RETAIL SALES",
						"type": "UTF8"
					},
					{
						"name": "RETAIL TRANSFERS",
						"type": "UTF8"
					},
					{
						"name": "WAREHOUSE SALES",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Parquet_silver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"dsp_folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().dsp_folder",
							"type": "Expression"
						},
						"container": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_first_ingest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.pl_parameter_tag",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1_copy1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Delete1",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"copyBehavior": "FlattenHierarchy"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "RestResource1",
											"type": "DatasetReference",
											"parameters": {
												"ds_parameter_tag": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_Json1",
											"type": "DatasetReference",
											"parameters": {
												"ds_parameter_folder": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_Json1",
											"type": "DatasetReference",
											"parameters": {
												"ds_parameter_folder": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "ls_AzureBlobStorage1",
												"type": "LinkedServiceReference"
											},
											"path": "log"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pl_parameter_tag": {
						"type": "array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-15T06:46:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource1')]",
				"[concat(variables('factoryId'), '/datasets/ds_Json1')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_first_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "loadDimTable",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@pipeline().parameters.plp_dim_folder",
										"type": "Expression"
									},
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_Parquet_silver",
								"type": "DatasetReference",
								"parameters": {
									"dsp_folder": {
										"value": "@pipeline().parameters.plp_dim_folder",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {
									"sql_schema": {
										"value": "@pipeline().parameters.sql_schema",
										"type": "Expression"
									},
									"sql_table": {
										"value": "@pipeline().parameters.sql_table_dim",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "loadFactTable",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "loadDimTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@pipeline().parameters.plp_fact_folder",
										"type": "Expression"
									},
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_Parquet_silver",
								"type": "DatasetReference",
								"parameters": {
									"dsp_folder": {
										"value": "@pipeline().parameters.plp_fact_folder",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {
									"sql_schema": {
										"value": "@pipeline().parameters.sql_schema",
										"type": "Expression"
									},
									"sql_table": {
										"value": "@pipeline().parameters.sql_table_fact",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pip_tags": {
						"type": "string"
					},
					"sql_schema": {
						"type": "string"
					},
					"sql_table_fact": {
						"type": "string"
					},
					"sql_table_dim": {
						"type": "string"
					},
					"plp_fact_folder": {
						"type": "string"
					},
					"plp_dim_folder": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Parquet_silver')]",
				"[concat(variables('factoryId'), '/datasets/ds_AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_Json1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Parquet_bronze",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "ls_AzureBlobStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          has_more as boolean,",
						"          items as (accepted_answer_id as integer, answer_count as short, closed_date as integer, closed_reason as string, content_license as string, creation_date as integer, is_answered as boolean, last_activity_date as integer, last_edit_date as integer, link as string, owner as (accept_rate as short, account_id as integer, display_name as string, link as string, profile_image as string, reputation as short, user_id as integer, user_type as string), question_id as integer, score as short, tags as string[], title as string, view_count as integer)[],",
						"          quota_max as short,",
						"          quota_remaining as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> source1",
						"source1 foldDown(unroll(items),",
						"     mapColumn(",
						"          accepted_answer_id = items.accepted_answer_id,",
						"          answer_count = items.answer_count,",
						"          closed_date = items.closed_date,",
						"          closed_reason = items.closed_reason,",
						"          content_license = items.content_license,",
						"          creation_date = items.creation_date,",
						"          is_answered = items.is_answered,",
						"          last_activity_date = items.last_activity_date,",
						"          last_edit_date = items.last_edit_date,",
						"          link = items.link,",
						"          owner = items.owner,",
						"          question_id = items.question_id,",
						"          score = items.score,",
						"          tags = items.tags,",
						"          title = items.title,",
						"          view_count = items.view_count",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive({owner.account_id} = owner.account_id,",
						"          {owner.display_name} = owner.display_name,",
						"          {owner.accept_rate} = owner.accept_rate,",
						"          {owner.reputation} = owner.reputation,",
						"          {owner.user_id} = owner.user_id,",
						"          tags = toString(tags)) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          question_id,",
						"          title,",
						"          accepted_answer_id,",
						"          answer_count,",
						"          closed_date,",
						"          closed_reason,",
						"          content_license,",
						"          creation_date,",
						"          is_answered,",
						"          last_activity_date,",
						"          last_edit_date,",
						"          link,",
						"          score,",
						"          tags,",
						"          view_count,",
						"          {owner.account_id},",
						"          {owner.display_name},",
						"          {owner.accept_rate},",
						"          {owner.reputation},",
						"          {owner.user_id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          YEAR as string,",
						"          MONTH as string,",
						"          SUPPLIER as string,",
						"          {ITEM CODE} as string,",
						"          {ITEM DESCRIPTION} as string,",
						"          {ITEM TYPE} as string,",
						"          {RETAIL SALES} as string,",
						"          {RETAIL TRANSFERS} as string,",
						"          {WAREHOUSE SALES} as string",
						"     ),",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'quarantine',",
						"     assertFailure_folderPath: 'api') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Json1')]",
				"[concat(variables('factoryId'), '/datasets/ds_Parquet_bronze')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_integration')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_Parquet_bronze",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_Parquet_silver",
								"type": "DatasetReference"
							},
							"name": "sinkFactTable"
						},
						{
							"dataset": {
								"referenceName": "ds_Parquet_silver",
								"type": "DatasetReference"
							},
							"name": "sinkDimTable"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "window1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          question_id as integer,",
						"          title as string,",
						"          accepted_answer_id as integer,",
						"          answer_count as short,",
						"          closed_date as integer,",
						"          closed_reason as string,",
						"          content_license as string,",
						"          creation_date as integer,",
						"          is_answered as boolean,",
						"          last_activity_date as integer,",
						"          last_edit_date as integer,",
						"          link as string,",
						"          score as short,",
						"          tags as string,",
						"          view_count as integer,",
						"          {owner.account_id} as integer,",
						"          {owner.display_name} as string,",
						"          {owner.accept_rate} as short,",
						"          {owner.reputation} as short,",
						"          {owner.user_id} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source1",
						"source1 select(mapColumn(",
						"          question_id,",
						"          title,",
						"          accepted_answer_id,",
						"          answer_count,",
						"          closed_date,",
						"          closed_reason,",
						"          content_license,",
						"          creation_date,",
						"          is_answered,",
						"          last_activity_date,",
						"          last_edit_date,",
						"          link,",
						"          score,",
						"          tags,",
						"          view_count,",
						"          {owner.account_id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source1 select(mapColumn(",
						"          {owner.account_id},",
						"          {owner.display_name},",
						"          {owner.accept_rate},",
						"          {owner.reputation},",
						"          {owner.user_id}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 window(over({owner.account_id}),",
						"     asc({owner.account_id}, true),",
						"     row_number = rowNumber()) ~> window1",
						"window1 filter(row_number==1) ~> filter1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('roundRobin', 2)) ~> sinkFactTable",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('roundRobin', 2)) ~> sinkDimTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Parquet_bronze')]",
				"[concat(variables('factoryId'), '/datasets/ds_Parquet_silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_first_transformation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "purgeBronze",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.pl_trans_parameter_tag",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "landing_to_bronze_flow",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_dataflow1",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"source1": {
													"ds_parameter_folder": {
														"value": "@item()",
														"type": "Expression"
													}
												},
												"sink1": {
													"ds_output_parameter_folder": {
														"value": "@item()",
														"type": "Expression"
													}
												}
											},
											"linkedServiceParameters": {}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "landing_to_bronze_flow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ParquetSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": {
													"value": "@item()",
													"type": "Expression"
												},
												"wildcardFileName": "*.parquet",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "ParquetReadSettings"
											}
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_Parquet_bronze",
											"type": "DatasetReference",
											"parameters": {
												"ds_output_parameter_folder": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_Parquet_bronze",
											"type": "DatasetReference",
											"parameters": {
												"ds_output_parameter_folder": {
													"value": "@pipeline().parameters.union_folder",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "purgeBronze",
						"type": "Delete",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_Parquet_bronze",
								"type": "DatasetReference",
								"parameters": {
									"ds_output_parameter_folder": " "
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "ls_AzureBlobStorage1",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "bronze_to_silver_flow_copy1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_integration",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {
										"ds_output_parameter_folder": {
											"value": "@pipeline().parameters.union_folder",
											"type": "Expression"
										}
									},
									"sinkFactTable": {
										"dsp_folder": {
											"value": "@pipeline().parameters.plp_fact_folder",
											"type": "Expression"
										}
									},
									"sinkDimTable": {
										"dsp_folder": {
											"value": "@pipeline().parameters.plp_dim_folder",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "purgeSilver",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_Parquet_silver",
								"type": "DatasetReference",
								"parameters": {
									"dsp_folder": " "
								}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "ls_AzureBlobStorage1",
									"type": "LinkedServiceReference"
								},
								"path": "log"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"pl_trans_parameter_tag": {
						"type": "array"
					},
					"union_folder": {
						"type": "string"
					},
					"plp_dim_folder": {
						"type": "string"
					},
					"plp_fact_folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-15T06:46:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Parquet_bronze')]",
				"[concat(variables('factoryId'), '/dataflows/df_integration')]",
				"[concat(variables('factoryId'), '/datasets/ds_Parquet_silver')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureBlobStorage1')]",
				"[concat(variables('factoryId'), '/dataflows/df_dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_first_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "data_ingest",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_first_ingest",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pl_parameter_tag": {
									"value": "@pipeline().parameters.mpl_parameter_tag",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "first_transformation",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "data_ingest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_first_transformation",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pl_trans_parameter_tag": {
									"value": "@pipeline().parameters.mpl_parameter_tag",
									"type": "Expression"
								},
								"union_folder": {
									"value": "@pipeline().parameters.mplp_union_folder",
									"type": "Expression"
								},
								"plp_dim_folder": {
									"value": "@pipeline().parameters.mplp_dim_folder",
									"type": "Expression"
								},
								"plp_fact_folder": {
									"value": "@pipeline().parameters.mplp_fact_folder",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "first_transformation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_first_load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"pip_tags": {
									"value": "@pipeline().parameters.mpl_parameter_tag",
									"type": "Expression"
								},
								"sql_schema": {
									"value": "@pipeline().parameters.mplp_sql_schema",
									"type": "Expression"
								},
								"sql_table_fact": {
									"value": "@pipeline().parameters.mplp_sql_fact_table",
									"type": "Expression"
								},
								"sql_table_dim": {
									"value": "@pipeline().parameters.mplp_sql_dim_table",
									"type": "Expression"
								},
								"plp_fact_folder": {
									"value": "@pipeline().parameters.mplp_fact_folder",
									"type": "Expression"
								},
								"plp_dim_folder": {
									"value": "@pipeline().parameters.mplp_dim_folder",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"mpl_parameter_tag": {
						"type": "array",
						"defaultValue": [
							"python",
							"databricks"
						]
					},
					"mplp_union_folder": {
						"type": "string",
						"defaultValue": "union"
					},
					"mplp_fact_folder": {
						"type": "string",
						"defaultValue": "fact"
					},
					"mplp_dim_folder": {
						"type": "string",
						"defaultValue": "dim"
					},
					"mplp_sql_schema": {
						"type": "string",
						"defaultValue": "sto"
					},
					"mplp_sql_fact_table": {
						"type": "string",
						"defaultValue": "factQuestions"
					},
					"mplp_sql_dim_table": {
						"type": "string",
						"defaultValue": "factOwners"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-15T06:46:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_first_ingest')]",
				"[concat(variables('factoryId'), '/pipelines/pl_first_transformation')]",
				"[concat(variables('factoryId'), '/pipelines/pl_first_load')]"
			]
		}
	]
}